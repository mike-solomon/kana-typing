{"version":3,"sources":["components/KanaDisplay/KanaDisplay.js","components/TypingBar/TypingBar.js","fixtures/constants.js","components/Game/Game.js","components/KanaCell/KanaCell.js","components/KanaSelectorCheckbox/KanaSelectorCheckbox.js","components/KanaSelectorRow/KanaSelectorRow.js","reducers/checkboxReducer.js","components/KanaSelector/KanaSelector.js","components/App/App.js","index.js"],"names":["KanaDisplay","kanaToDisplay","className","Jumbotron","TypingBar","isWrong","userInput","onChange","type","value","length","aRow","あ","い","う","え","お","kaRow","か","き","く","け","こ","gaRow","が","ぎ","ぐ","げ","ご","kyaRow","きゃ","きゅ","きょ","gyaRow","ぎゃ","ぎゅ","ぎょ","saRow","さ","し","す","せ","そ","zaRow","ざ","じ","ず","ぜ","ぞ","shaRow","しゃ","しゅ","しょ","jaRow","じゃ","じゅ","じょ","taRow","た","ち","つ","て","と","daRow","だ","ぢ","づ","で","ど","chaRow","ちゃ","ちゅ","ちょ","hiraganaToValidRomajiMap","hiraganaRows","getRandomKanaWithAnswers","max","Object","keys","rand","Math","floor","random","kana","possibleAnswers","Game","useState","setUserInput","requestedKana","setRequestedKana","setIsWrong","event","target","includes","shouldNotifyUser","longestPossibleAnswer","reduce","a","b","shouldNotifyUserOfWrongAnswer","KanaCell","kanaAnswers","romajiToDisplay","Array","isArray","KanaSelectorCheckbox","checked","color","KanaSelectorRow","kanaRow","onClick","kanaCells","push","key","getKanaCellsForKanaRow","checkboxReducer","state","action","console","log","JSON","stringify","Error","initialState","あrow","かrow","がrow","きゃrow","ぎゃrow","さrow","ざrow","しゃrow","じゃrow","たrow","だrow","ちゃrow","KanaSelector","useReducer","dispatch","Table","striped","bordered","hover","size","map","hiraganaRow","kanaRowId","e","textContent","getKanaRows","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b830f6af.chunk.js","sourcesContent":["import \"./KanaDisplay.scss\";\n\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport React from \"react\";\n\nconst KanaDisplay = ({ kanaToDisplay }) => {\n  return (\n    <div className=\"KanaDisplay\">\n      <Jumbotron>\n        <h1>{kanaToDisplay}</h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default KanaDisplay;\n","import \"./TypingBar.scss\";\n\nimport React from \"react\";\n\nconst TypingBar = ({ isWrong, userInput, onChange }) => {\n  const className = isWrong ? \"wrong form-control\" : \"form-control\";\n\n  return (\n    <div className=\"TypingBar\">\n      <input\n        type=\"text\"\n        className={className}\n        value={userInput}\n        onChange={onChange}\n      />\n      <br />\n      <div className=\"alert alert-primary\">\n        You entered {userInput.length} amount of characters. <br />\n        You entered {userInput} characters.\n      </div>\n    </div>\n  );\n};\n\nexport default TypingBar;\n","const aRow = {\n  あ: [\"a\"],\n  い: [\"i\"],\n  う: [\"u\"],\n  え: [\"e\"],\n  お: [\"o\"],\n};\n\nconst kaRow = {\n  か: [\"ka\"],\n  き: [\"ki\"],\n  く: [\"ku\"],\n  け: [\"ke\"],\n  こ: [\"ko\"],\n};\n\nconst gaRow = {\n  が: [\"ga\"],\n  ぎ: [\"gi\"],\n  ぐ: [\"gu\"],\n  げ: [\"ge\"],\n  ご: [\"go\"],\n};\n\nconst kyaRow = {\n  きゃ: [\"kya\"],\n  きゅ: [\"kyu\"],\n  きょ: [\"kyo\"],\n};\n\nconst gyaRow = {\n  ぎゃ: [\"gya\"],\n  ぎゅ: [\"gyu\"],\n  ぎょ: [\"gyo\"],\n};\n\nconst saRow = {\n  さ: [\"sa\"],\n  し: [\"shi\"],\n  す: [\"su\"],\n  せ: [\"se\"],\n  そ: [\"so\"],\n};\n\nconst zaRow = {\n  ざ: [\"za\"],\n  じ: [\"ji\"],\n  ず: [\"zu\"],\n  ぜ: [\"ze\"],\n  ぞ: [\"zo\"],\n};\n\nconst shaRow = {\n  しゃ: [\"sha\"],\n  しゅ: [\"shu\"],\n  しょ: [\"sho\"],\n};\n\nconst jaRow = {\n  じゃ: [\"ja\"],\n  じゅ: [\"ju\"],\n  じょ: [\"jo\"],\n};\n\nconst taRow = {\n  た: [\"ta\"],\n  ち: [\"chi\"],\n  つ: [\"tsu\"],\n  て: [\"te\"],\n  と: [\"to\"],\n};\n\nconst daRow = {\n  だ: [\"da\"],\n  ぢ: [\"ji\", \"dji\", \"jyi\"],\n  づ: [\"dzu\", \"zu\"],\n  で: [\"de\"],\n  ど: [\"do\"],\n};\n\nconst chaRow = {\n  ちゃ: [\"cha\"],\n  ちゅ: [\"chu\"],\n  ちょ: [\"cho\"],\n};\n\n// Unsure if this should be in or not...\n// const dyaRow = {\n//   ぢゃ: [\"dya\"],\n//   ぢゅ: [\"dyu\"],\n//   ぢょ: [\"dyo\"],\n// };\n\nexport const hiraganaToValidRomajiMap = {\n  ...aRow,\n  ...kaRow,\n  ...gaRow,\n  ...kyaRow,\n  ...gyaRow,\n  ...saRow,\n  ...zaRow,\n  ...shaRow,\n  ...jaRow,\n  ...taRow,\n  ...daRow,\n  ...chaRow,\n};\n\nexport const hiraganaRows = [\n  aRow,\n  kaRow,\n  gaRow,\n  kyaRow,\n  gyaRow,\n  saRow,\n  zaRow,\n  shaRow,\n  jaRow,\n  taRow,\n  daRow,\n  chaRow,\n];\n","import \"./Game.scss\";\n\nimport React, { useState } from \"react\";\n\nimport KanaDisplay from \"../KanaDisplay/KanaDisplay\";\nimport TypingBar from \"../TypingBar/TypingBar\";\nimport { hiraganaToValidRomajiMap } from \"../../fixtures/constants\";\n\nconst getRandomKanaWithAnswers = () => {\n  const min = 0;\n  const max = Object.keys(hiraganaToValidRomajiMap).length - 1;\n  const rand = Math.floor(Math.random() * (max - min + 1) + min);\n\n  const kana = Object.keys(hiraganaToValidRomajiMap)[rand];\n  const possibleAnswers = hiraganaToValidRomajiMap[kana];\n\n  const kanaWithAnswers = {\n    kana,\n    possibleAnswers,\n  };\n\n  return kanaWithAnswers;\n};\n\nconst shouldNotifyUserOfWrongAnswer = (requestedKana, userInput) => {\n  let shouldNotifyUser = false;\n\n  const longestPossibleAnswer = requestedKana.possibleAnswers.reduce(function (\n    a,\n    b\n  ) {\n    return a.length >= b.length ? a : b;\n  });\n\n  if (\n    userInput.includes(\" \") ||\n    userInput.length >= longestPossibleAnswer.length\n  ) {\n    shouldNotifyUser = true;\n  }\n\n  return shouldNotifyUser;\n};\n\nconst Game = () => {\n  const [userInput, setUserInput] = useState(\"\");\n  const [requestedKana, setRequestedKana] = useState(\n    getRandomKanaWithAnswers()\n  );\n  const [isWrong, setIsWrong] = useState(false);\n\n  const onUserInputChange = (event) => {\n    setUserInput(event.target.value);\n\n    if (requestedKana.possibleAnswers.includes(event.target.value)) {\n      setUserInput(\"\");\n      setRequestedKana(getRandomKanaWithAnswers());\n      setIsWrong(false);\n    } else if (\n      shouldNotifyUserOfWrongAnswer(requestedKana, event.target.value)\n    ) {\n      setIsWrong(true);\n    }\n  };\n\n  return (\n    <div className=\"Game\">\n      <KanaDisplay kanaToDisplay={requestedKana.kana} />\n      <TypingBar\n        isWrong={isWrong}\n        userInput={userInput}\n        onChange={onUserInputChange}\n      />\n    </div>\n  );\n};\n\nexport default Game;\n","import \"./KanaCell.scss\";\n\nimport React from \"react\";\n\nconst KanaCell = ({ kana, kanaAnswers }) => {\n  let romajiToDisplay = \"\";\n\n  // We get an array of possible answers but, for now, let's just\n  // pick the first one to display to users.\n  if (Array.isArray(kanaAnswers) && kanaAnswers.length > 0) {\n    romajiToDisplay = kanaAnswers[0];\n  }\n\n  return (\n    <td>\n      <span className=\"kana\">{kana}</span>\n      <div className=\"romaji\">{romajiToDisplay}</div>\n    </td>\n  );\n};\n\nexport default KanaCell;\n","import \"./KanaSelectorCheckbox.scss\";\n\nimport { Checkbox } from \"pretty-checkbox-react\";\nimport React from \"react\";\n\nconst KanaSelectorCheckbox = ({ checked }) => {\n  return (\n    <td className=\"center\">\n      <div className=\"pretty p-switch p-fill\">\n        {/* The checkbox will be turned on / off based on the row click. \n            Because of that, we don't want the checkbox itself to do anything on change\n            - so set the onChange function to do nothing. */}\n        <Checkbox color=\"primary\" checked={checked} onChange={() => {}} />\n      </div>\n    </td>\n  );\n};\n\nexport default KanaSelectorCheckbox;\n","import \"./KanaSelectorRow.scss\";\n\nimport KanaCell from \"../KanaCell/KanaCell\";\nimport KanaSelectorCheckbox from \"../KanaSelectorCheckbox/KanaSelectorCheckbox\";\nimport React from \"react\";\n\nconst getKanaCellsForKanaRow = (kanaRow) => {\n  let kanaCells = [];\n\n  for (const kana in kanaRow) {\n    kanaCells.push(\n      <KanaCell key={kana} kana={kana} kanaAnswers={kanaRow[kana]} />\n    );\n  }\n\n  return kanaCells;\n};\n\nconst KanaSelectorRow = ({ kanaRow, onClick, checked }) => {\n  return (\n    <tr onClick={onClick}>\n      <KanaSelectorCheckbox checked={checked} />\n      {getKanaCellsForKanaRow(kanaRow)}\n    </tr>\n  );\n};\n\nexport default KanaSelectorRow;\n","const checkboxReducer = (state, action) => {\n  console.log(`action: ${JSON.stringify(action)}`);\n\n  switch (action.type) {\n    case \"ROW_CLICKED\":\n      return {\n        ...state,\n        [action.key]: !state[action.key],\n      };\n    default:\n      throw new Error(\"Invalid action type\");\n  }\n};\n\nexport default checkboxReducer;\n","import \"./KanaSelector.scss\";\n\nimport React, { useReducer } from \"react\";\n\nimport KanaSelectorRow from \"../KanaSelectorRow/KanaSelectorRow\";\nimport Table from \"react-bootstrap/Table\";\nimport checkboxReducer from \"../../reducers/checkboxReducer\";\nimport { hiraganaRows } from \"../../fixtures/constants\";\n\nconst initialState = {\n  あrow: true,\n  かrow: true,\n  がrow: true,\n  きゃrow: true,\n  ぎゃrow: true,\n  さrow: true,\n  ざrow: true,\n  しゃrow: true,\n  じゃrow: true,\n  たrow: true,\n  だrow: true,\n  ちゃrow: true,\n};\n\nconst getKanaRows = (state, dispatch) => {\n  const kanaRows = hiraganaRows.map((hiraganaRow) => {\n    // console.log(`hiraganaRow: ${JSON.stringify(hiraganaRow)}`);\n    // console.log(`rowKey: ${Object.keys(hiraganaRow)[0] + \"row\"}`);\n\n    // When iterating over objects in React, React needs a unique\n    // \"key\" to help identify which items have changed, are added,\n    // or are removed. In this case, let's just use the first kana\n    // as the identifier.\n    //\n    // See here for more info:\n    // https://reactjs.org/docs/lists-and-keys.html#keys\n    const kanaRowId = Object.keys(hiraganaRow)[0] + \"row\";\n\n    return (\n      <KanaSelectorRow\n        key={kanaRowId}\n        onClick={(e) => {\n          console.log(\n            `text I clicked on MEOW: ${JSON.stringify(e.target.textContent)}`\n          );\n          console.log(`kanaRowId: ${kanaRowId}`);\n          dispatch({ type: \"ROW_CLICKED\", key: kanaRowId });\n        }}\n        checked={state[kanaRowId]}\n        kanaRow={hiraganaRow}\n      />\n    );\n  });\n\n  return kanaRows;\n};\n\nconst KanaSelector = () => {\n  const [state, dispatch] = useReducer(checkboxReducer, initialState);\n\n  return (\n    <Table striped bordered hover size=\"sm\">\n      <tbody>{getKanaRows(state, dispatch)}</tbody>\n    </Table>\n  );\n};\n\nexport default KanaSelector;\n","import \"./App.scss\";\n\nimport Game from \"../Game/Game\";\nimport KanaSelector from \"../KanaSelector/KanaSelector\";\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Kana Typing</p>\n      </header>\n      <Game />\n      <KanaSelector />\n    </div>\n  );\n}\n\nexport default App;\n","import \"./index.scss\";\n\nimport App from \"./components/App/App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}