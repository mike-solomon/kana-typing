{"version":3,"sources":["components/KanaDisplay/KanaDisplay.js","components/TypingBar/TypingBar.js","fixtures/constants.js","components/Game/Game.js","components/KanaCell/KanaCell.js","components/KanaSelectorCheckbox/KanaSelectorCheckbox.js","components/KanaSelectorRow/KanaSelectorRow.js","reducers/checkboxReducer.js","components/KanaSelector/KanaSelector.js","components/App/App.js","index.js"],"names":["KanaDisplay","props","console","log","JSON","stringify","className","Jumbotron","content","TypingBar","isWrong","value","onChange","type","length","aRow","あ","い","う","え","お","kaRow","か","き","く","け","こ","gaRow","が","ぎ","ぐ","げ","ご","kyaRow","きゃ","きゅ","きょ","gyaRow","ぎゃ","ぎゅ","ぎょ","saRow","さ","し","す","せ","そ","zaRow","ざ","じ","ず","ぜ","ぞ","shaRow","しゃ","しゅ","しょ","jaRow","じゃ","じゅ","じょ","taRow","た","ち","つ","て","と","daRow","だ","ぢ","づ","で","ど","chaRow","ちゃ","ちゅ","ちょ","hiraganaToValidRomajiMap","hiraganaRows","Game","getRandomKana","max","Object","keys","rand","Math","floor","random","displayedKana","possibleAnswers","useState","setValue","kana","setKana","setIsWrong","event","target","includes","userInput","shouldNotifyUser","longestPossibleAnswer","reduce","a","b","shouldNotifyUserOfWrongAnswer","KanaCell","kanaAnswers","KanaSelectorCheckbox","color","checked","KanaSelectorRow","kanaRow","componentsToRender","push","key","onClick","kanaRowId","checkboxReducer","state","action","Error","initialState","あrow","かrow","がrow","きゃrow","ぎゃrow","さrow","ざrow","しゃrow","じゃrow","たrow","だrow","ちゃrow","KanaSelector","useReducer","dispatch","map","hiraganaRow","e","textContent","Table","striped","bordered","hover","size","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5be205b8.chunk.js","sourcesContent":["import \"./KanaDisplay.scss\";\n\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport React from \"react\";\n\nconst KanaDisplay = (props) => {\n  console.log(`props: ${JSON.stringify(props)}`);\n\n  return (\n    <div className=\"KanaDisplay\">\n      <Jumbotron>\n        <h1>{props.content}</h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default KanaDisplay;\n","import \"./TypingBar.scss\";\n\nimport React from \"react\";\n\nconst TypingBar = ({ isWrong, value, onChange }) => {\n  const className = isWrong ? \"wrong form-control\" : \"form-control\";\n\n  return (\n    <div className=\"TypingBar\">\n      <input\n        type=\"text\"\n        className={className}\n        value={value}\n        onChange={onChange}\n      />\n      <br />\n      <div className=\"alert alert-primary\">\n        You entered {value.length} amount of characters. <br />\n        You entered {value} characters.\n      </div>\n    </div>\n  );\n};\n\nexport default TypingBar;\n","const aRow = {\n  あ: [\"a\"],\n  い: [\"i\"],\n  う: [\"u\"],\n  え: [\"e\"],\n  お: [\"o\"],\n};\n\nconst kaRow = {\n  か: [\"ka\"],\n  き: [\"ki\"],\n  く: [\"ku\"],\n  け: [\"ke\"],\n  こ: [\"ko\"],\n};\n\nconst gaRow = {\n  が: [\"ga\"],\n  ぎ: [\"gi\"],\n  ぐ: [\"gu\"],\n  げ: [\"ge\"],\n  ご: [\"go\"],\n};\n\nconst kyaRow = {\n  きゃ: [\"kya\"],\n  きゅ: [\"kyu\"],\n  きょ: [\"kyo\"],\n};\n\nconst gyaRow = {\n  ぎゃ: [\"gya\"],\n  ぎゅ: [\"gyu\"],\n  ぎょ: [\"gyo\"],\n};\n\nconst saRow = {\n  さ: [\"sa\"],\n  し: [\"shi\"],\n  す: [\"su\"],\n  せ: [\"se\"],\n  そ: [\"so\"],\n};\n\nconst zaRow = {\n  ざ: [\"za\"],\n  じ: [\"ji\"],\n  ず: [\"zu\"],\n  ぜ: [\"ze\"],\n  ぞ: [\"zo\"],\n};\n\nconst shaRow = {\n  しゃ: [\"sha\"],\n  しゅ: [\"shu\"],\n  しょ: [\"sho\"],\n};\n\nconst jaRow = {\n  じゃ: [\"ja\"],\n  じゅ: [\"ju\"],\n  じょ: [\"jo\"],\n};\n\nconst taRow = {\n  た: [\"ta\"],\n  ち: [\"chi\"],\n  つ: [\"tsu\"],\n  て: [\"te\"],\n  と: [\"to\"],\n};\n\nconst daRow = {\n  だ: [\"da\"],\n  ぢ: [\"ji\", \"dji\", \"jyi\"],\n  づ: [\"dzu\", \"zu\"],\n  で: [\"de\"],\n  ど: [\"do\"],\n};\n\nconst chaRow = {\n  ちゃ: [\"cha\"],\n  ちゅ: [\"chu\"],\n  ちょ: [\"cho\"],\n};\n\n// Unsure if this should be in or not...\n// const dyaRow = {\n//   ぢゃ: [\"dya\"],\n//   ぢゅ: [\"dyu\"],\n//   ぢょ: [\"dyo\"],\n// };\n\nexport const hiraganaToValidRomajiMap = {\n  ...aRow,\n  ...kaRow,\n  ...gaRow,\n  ...kyaRow,\n  ...gyaRow,\n  ...saRow,\n  ...zaRow,\n  ...shaRow,\n  ...jaRow,\n  ...taRow,\n  ...daRow,\n  ...chaRow,\n};\n\nexport const hiraganaRows = [\n  aRow,\n  kaRow,\n  gaRow,\n  kyaRow,\n  gyaRow,\n  saRow,\n  zaRow,\n  shaRow,\n  jaRow,\n  taRow,\n  daRow,\n  chaRow,\n];\n","import \"./Game.scss\";\n\nimport React, { useState } from \"react\";\n\nimport KanaDisplay from \"../KanaDisplay/KanaDisplay\";\nimport TypingBar from \"../TypingBar/TypingBar\";\nimport { hiraganaToValidRomajiMap } from \"../../fixtures/constants\";\n\nfunction Game() {\n  const getRandomKana = () => {\n    const min = 0;\n    const max = Object.keys(hiraganaToValidRomajiMap).length - 1;\n    const rand = Math.floor(Math.random() * (max - min + 1) + min);\n\n    const displayedKana = Object.keys(hiraganaToValidRomajiMap)[rand];\n    const possibleAnswers = hiraganaToValidRomajiMap[displayedKana];\n\n    const kana = {\n      displayedKana,\n      possibleAnswers,\n    };\n\n    return kana;\n  };\n\n  const shouldNotifyUserOfWrongAnswer = (userInput) => {\n    let shouldNotifyUser = false;\n\n    const longestPossibleAnswer = kana.possibleAnswers.reduce(function (a, b) {\n      return a.length >= b.length ? a : b;\n    });\n\n    console.log(`userInput: ${userInput}`);\n    console.log(`userInput length: ${userInput.length}`);\n    console.log(`kana: ${longestPossibleAnswer}`);\n    console.log(`kana length: ${longestPossibleAnswer.length}`);\n\n    if (\n      userInput.includes(\" \") ||\n      userInput.length >= longestPossibleAnswer.length\n    ) {\n      shouldNotifyUser = true;\n    }\n\n    return shouldNotifyUser;\n  };\n\n  const [value, setValue] = useState(\"\");\n  const [kana, setKana] = useState(getRandomKana());\n  const [isWrong, setIsWrong] = useState(false);\n\n  const onUserInputChange = (event) => {\n    setValue(event.target.value);\n\n    if (kana.possibleAnswers.includes(event.target.value)) {\n      console.log(\"OMG THIS WORKED?!!\");\n      setValue(\"\");\n      setKana(getRandomKana());\n      setIsWrong(false);\n    } else if (shouldNotifyUserOfWrongAnswer(event.target.value)) {\n      console.log(\"wrong!\");\n      setIsWrong(true);\n    }\n  };\n\n  return (\n    <div className=\"Game\">\n      <KanaDisplay content={kana.displayedKana} />\n      <TypingBar isWrong={isWrong} value={value} onChange={onUserInputChange} />\n    </div>\n  );\n}\n\nexport default Game;\n","import \"./KanaCell.scss\";\n\nimport React from \"react\";\n\nconst KanaCell = (props) => {\n  return (\n    <td>\n      <span className=\"kana\">{props.kana}</span>\n      <div className=\"romaji\">{props.kanaAnswers[0]}</div>\n    </td>\n  );\n};\n\nexport default KanaCell;\n","import \"./KanaSelectorCheckbox.scss\";\n\nimport { Checkbox } from \"pretty-checkbox-react\";\nimport React from \"react\";\n\nconst KanaSelectorCheckbox = (props) => {\n  return (\n    <td className=\"center\">\n      <div className=\"pretty p-switch p-fill\">\n        {/* The checkbox will be turned on / off based on the row click. \n            Because of that, we don't want the checkbox itself to do anything on change\n            - so set the onChange function to do nothing. */}\n        <Checkbox color=\"primary\" checked={props.checked} onChange={() => {}} />\n      </div>\n    </td>\n  );\n};\n\nexport default KanaSelectorCheckbox;\n","import \"./KanaSelectorRow.scss\";\n\nimport KanaCell from \"../KanaCell/KanaCell\";\nimport KanaSelectorCheckbox from \"../KanaSelectorCheckbox/KanaSelectorCheckbox\";\nimport React from \"react\";\n\nconst KanaSelectorRow = (props) => {\n  console.log(`kanaRow: ${JSON.stringify(props.kanaRow)}`);\n\n  let componentsToRender = [];\n\n  for (const kana in props.kanaRow) {\n    componentsToRender.push(\n      <KanaCell key={kana} kana={kana} kanaAnswers={props.kanaRow[kana]} />\n    );\n  }\n\n  return (\n    <tr onClick={props.onClick}>\n      <KanaSelectorCheckbox\n        kanaRowId={props.kanaRowId}\n        checked={props.checked}\n      />\n      {componentsToRender}\n    </tr>\n  );\n};\n\nexport default KanaSelectorRow;\n","const checkboxReducer = (state, action) => {\n  console.log(`action: ${JSON.stringify(action)}`);\n  console.log(`state: ${JSON.stringify(state)}`);\n\n  switch (action.type) {\n    case \"ROW_CLICKED\":\n      return {\n        ...state,\n        [action.key]: !state[action.key],\n      };\n    default:\n      throw new Error(\"Invalid action type\");\n  }\n};\n\nexport default checkboxReducer;\n","import \"./KanaSelector.scss\";\n\nimport React, { useReducer } from \"react\";\n\nimport KanaSelectorRow from \"../KanaSelectorRow/KanaSelectorRow\";\nimport Table from \"react-bootstrap/Table\";\nimport checkboxReducer from \"../../reducers/checkboxReducer\";\nimport { hiraganaRows } from \"../../fixtures/constants\";\n\nconst initialState = {\n  あrow: true,\n  かrow: true,\n  がrow: true,\n  きゃrow: true,\n  ぎゃrow: true,\n  さrow: true,\n  ざrow: true,\n  しゃrow: true,\n  じゃrow: true,\n  たrow: true,\n  だrow: true,\n  ちゃrow: true,\n};\n\nconst KanaSelector = () => {\n  console.log(`hiraganaRows: ${JSON.stringify(hiraganaRows)}`);\n\n  const [state, dispatch] = useReducer(checkboxReducer, initialState);\n\n  const componentsToRender = hiraganaRows.map((hiraganaRow) => {\n    console.log(`hiraganaRow: ${JSON.stringify(hiraganaRow)}`);\n    console.log(`rowKey: ${Object.keys(hiraganaRow)[0] + \"row\"}`);\n\n    // When iterating over objects in React, React needs a unique\n    // \"key\" to help identify which items have changed, are added,\n    // or are removed. In this case, let's just use the first kana\n    // as the identifier.\n    //\n    // See here for more info:\n    // https://reactjs.org/docs/lists-and-keys.html#keys\n    const kanaRowId = Object.keys(hiraganaRow)[0] + \"row\";\n\n    return (\n      <KanaSelectorRow\n        key={kanaRowId}\n        kanaRowId={kanaRowId}\n        onClick={(e) => {\n          console.log(\n            `text I clicked on MEOW: ${JSON.stringify(e.target.textContent)}`\n          );\n          console.log(`kanaRowId: ${kanaRowId}`);\n          console.log(\"row clicked!!\");\n          dispatch({ type: \"ROW_CLICKED\", key: kanaRowId });\n        }}\n        checked={state[kanaRowId]}\n        kanaRow={hiraganaRow}\n      />\n    );\n  });\n\n  return (\n    <Table striped bordered hover size=\"sm\">\n      <tbody>{componentsToRender}</tbody>\n    </Table>\n  );\n};\n\nexport default KanaSelector;\n","import \"./App.scss\";\n\nimport Game from \"../Game/Game\";\nimport KanaSelector from \"../KanaSelector/KanaSelector\";\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Kana Typing</p>\n      </header>\n      <Game />\n      <KanaSelector />\n    </div>\n  );\n}\n\nexport default App;\n","import \"./index.scss\";\n\nimport App from \"./components/App/App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}